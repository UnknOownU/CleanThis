{% extends '@EasyAdmin/layout.html.twig' %}

{% block body_id 'page-content-wrapper' %}

{% block main %}

<section class="content-body">
    <div class="row d-flex justify-content-around"> <!-- Modifier ici pour aligner à droite -->
        <div class="col-md-10">
            <div class="user-info mb-4 p-5" id="profile-info" style="border-radius: 20px;"> <!-- Ajouter border-radius -->
                <h2 class="h4 text-primary mb-4">{{ "Informations du Profil"|trans }}</h2>
                <p><strong>{{ "Email:"|trans }}</strong> {{ user.email }}</p>
                <p><strong>{{ "Nom:"|trans }}</strong> {{ user.name }}</p>
                <p><strong>{{ "Prénom:"|trans }}</strong> {{ user.firstname }}</p>
                <p><strong>{{ "Code Postal:"|trans }}</strong> {{ user.zipcode }}</p>
                <p><strong>{{ "Ville:"|trans }}</strong> {{ user.city }}</p>
                <p><strong>{{ "Rue:"|trans }}</strong> {{ user.street }}</p>
                <p><strong>{{ "Téléphone:"|trans }}</strong> {{ user.phone }}</p>
                <p>
                    <strong>{{ "Rôle:"|trans }}</strong>
                    <span class="{% if 'ROLE_ADMIN' in user.roles %}text-danger
                                 {% elseif 'ROLE_SENIOR' in user.roles %}text-success
                                 {% elseif 'ROLE_APPRENTI' in user.roles %}text-primary
                                 {% else %}text-warning{% endif %}">
                        {{ user.roles|join(', ')|replace({'ROLE_': ''})|title }}
                    </span>
                </p>
                <button class="btn btn-outline-primary" onclick="toggleEditForm()">{{ "Modifier"|trans }}</button>
            </div>
            
            <div class="edit-form d-none p-5" id="profile-edit-form" style="border-radius: 20px; transition: all 0.5s ease-in-out;"> <!-- Ajouter border-radius -->
                {{ form_start(form, {'attr': {'id': 'profile-edit-form-twig'}}) }}
                <h2 class="h4 text-primary mb-4">{{ "Éditer le Profil"|trans }}</h2>
                {{ form_row(form.email, {'attr': {'class': 'form-control mb-3'}}) }}
                {{ form_row(form.name, {'attr': {'class': 'form-control mb-3'}}) }}
                {{ form_row(form.firstname, {'attr': {'class': 'form-control mb-3'}}) }}
                {{ form_row(form.zipcode, {'attr': {'class': 'form-control mb-3'}}) }}
                {{ form_row(form.city, {'attr': {'class': 'form-control mb-3'}}) }}
                {{ form_row(form.street, {'attr': {'class': 'form-control mb-3'}}) }}
                {{ form_row(form.phone, {'attr': {'class': 'form-control mb-3'}}) }}
                {{ form_row(form.newPassword.first, {'attr': {'class': 'form-control mb-3'}}) }}
                {{ form_row(form.newPassword.second, {'attr': {'class': 'form-control mb-3'}}) }}
                    <div class="form-group mt-4">
                    <button type="submit" class="btn btn-success">{{ "Sauvegarder"|trans }}</button>
                    <button type="button" class="btn btn-secondary" onclick="toggleEditForm()">{{ "Annuler"|trans }}</button>
                {{ form_end(form) }}
            </div>
        </div>
    </div>
</section>
{% block javascripts %}
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script type="text/javascript">
        function initFormCheck() {
            var initialValues = {};
            var form = document.getElementById('profile-edit-form-twig');

            if (form) {
                Array.from(form.elements).forEach(function(element) {
                    if (element.name) {
                        initialValues[element.name] = element.value;
                    }
                });

                form.addEventListener('submit', function(event) {
                    event.preventDefault(); // Empêche la soumission immédiate du formulaire

                    var newPassword = form.querySelector('[name="user[newPassword][first]"]').value;
                    if (!isPasswordValid(newPassword)) {
                        Swal.fire('Erreur!', 'Le mot de passe doit contenir au moins 8 caractères, une majuscule et un chiffre.', 'error');
                        return;
                    }

                    var changedFields = [];
                    Array.from(form.elements).forEach(function(element) {
                        if (element.name && initialValues[element.name] !== element.value) {
                            const friendlyName = getFriendlyFieldName(element.name);
                            changedFields.push(`${friendlyName}: "${initialValues[element.name]}" en "${element.value}"`);
                        }
                    });

                    if (changedFields.length > 0) {
                        Swal.fire({
                            title: 'Confirmez les changements',
                            html: "Voulez-vous vraiment changer les champs suivants?<br>" + changedFields.join("<br>"),
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Oui, changer!',
                            cancelButtonText: 'Non, annuler!'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                Swal.fire({
                                    title: 'Succès!',
                                    text: 'Vos modifications ont été enregistrées.',
                                    icon: 'success',
                                });
                                form.submit(); // Soumet le formulaire si confirmé
                            }
                        });
                    }
                });
            }
        }

        window.onload = initFormCheck;

        function getFriendlyFieldName(fieldName) {
            const nameMap = {
                'user[email]': 'Email',
                'user[name]': 'Nom de famille',
                'user[firstname]': 'Prénom',
                'user[zipcode]': 'Code Postal',
                'user[city]': 'Ville',
                'user[street]': 'Rue',
                'user[phone]': 'Téléphone',
                'user[newPassword][first]': 'Nouveau mot de passe',
                'user[newPassword][second]': 'Confirmation du mot de passe'
            };
            return nameMap[fieldName] || fieldName;
        }

        function toggleEditForm() {
            let info = document.getElementById('profile-info');
            let form = document.getElementById('profile-edit-form');
            
            if (info.style.display === 'none') {
                info.style.display = 'block';
                form.style.display = 'none';
                form.classList.add('d-none');
            } else {
                info.style.display = 'none';
                form.style.display = 'block';
                form.classList.remove('d-none');
            }
        }

        function isPasswordValid(password) {
            var minLength = 8;
            var hasUpperCase = /[A-Z]/.test(password);
            var hasNumber = /[0-9]/.test(password);

            return password.length >= minLength && hasUpperCase && hasNumber;
        }
    </script>
{% endblock %}
{% endblock %}
